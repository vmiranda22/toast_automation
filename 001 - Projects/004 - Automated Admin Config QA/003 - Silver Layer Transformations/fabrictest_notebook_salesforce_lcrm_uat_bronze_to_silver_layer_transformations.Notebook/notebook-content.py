# Fabric notebook source

# METADATA ********************

# META {
# META   "kernel_info": {
# META     "name": "synapse_pyspark"
# META   },
# META   "dependencies": {
# META     "lakehouse": {
# META       "default_lakehouse": "4b9a8e2d-64db-464e-b218-053f22ac13b1",
# META       "default_lakehouse_name": "fabrictest_lakehouse",
# META       "default_lakehouse_workspace_id": "b08d383a-b8cc-4b8e-b189-d9d696a01977",
# META       "known_lakehouses": [
# META         {
# META           "id": "4b9a8e2d-64db-464e-b218-053f22ac13b1"
# META         }
# META       ]
# META     }
# META   }
# META }

# CELL ********************

import pandas as pd

wrangler_sample_df = pd.read_csv("https://aka.ms/wrangler/titanic.csv")
display(wrangler_sample_df)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark",
# META   "editable": true
# META }

# CELL ********************

# Code generated by Data Wrangler for pandas DataFrame

def clean_data(wrangler_sample_df):
    # Rename column 'PassengerId' to 'TestColumn'
    wrangler_sample_df = wrangler_sample_df.rename(columns={'PassengerId': 'TestColumn'})
    return wrangler_sample_df

wrangler_sample_df_clean = clean_data(wrangler_sample_df.copy())
wrangler_sample_df_clean.head()

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# # Silver Layer Transformations for Salesforce LCRM UAT Bronze Tables

# MARKDOWN ********************

# ##### Import required resources.

# CELL ********************

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, concat, expr, lit, when
from pyspark.sql.types import BooleanType, DateType, DoubleType, IntegerType, StringType, TimestampType

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Initialize SparkSession.

# CELL ********************

spark = SparkSession.builder.getOrCreate()
spark.conf.set("spark.sql.parquet.datetimeRebaseModeInRead", "LEGACY")
spark.conf.set("spark.sql.parquet.datetimeRebaseModeInWrite", "LEGACY")
# spark.conf.set("spark.native.enabled", "true")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Create Dictionary witch each Bronze table and its corresponding columns mapping to **rename, reorder, and specify Data Types**.

# CELL ********************

silver_tables_columns_mapping = {
    "salesforce_uat_100_bronze_account": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Friendly_Account_Name__c": ("friendly_account_name", StringType()),
        "Account_Type__c": ("account_type", StringType()),
        "Account_Sub_Type__c": ("account_sub_type", StringType()),
        "Customer_Type__c": ("customer_type", StringType()),
        "Client_Channel_Segment__c": ("client_channel_segment", StringType()),
        "Business_Region__c": ("business_region", StringType()),
        "Account_Manager__c": ("account_manager", StringType()),
        "OrgID__c": ("organization_id", StringType()),
        "GUID__c": ("guid", StringType()),
        "Hierarchy__c": ("hierarchy", StringType()),
        "Billing_Org_ID__c": ("billing_org_id", StringType()),
        "BillingStreet": ("billing_street", StringType()),
        "Billing_County__c": ("billing_county", StringType()),
        "BillingCity": ("billing_city", StringType()),
        "BillingState": ("billing_state", StringType()),
        "BillingStateCode": ("billing_state_code", StringType()),
        "BillingPostalCode": ("billing_postal_code", StringType()),
        "BillingCountry": ("billing_country", StringType()),
        "BillingCountryCode": ("billing_country_code", StringType()),
        "Receives_Invoice__c": ("receives_invoice", BooleanType()),
        "Payment_Terms__c": ("payment_terms", StringType()),
        "Report_Template__c": ("report_template", StringType()),
        "Report_Sorting__c": ("report_sorting", StringType()),
        "Utilization_Reporting_Level__c": ("utilization_reporting_level", StringType()),
        "Report_Recipient_Emails__c": ("report_recipient_emails", StringType()),
        "Print_Phone__c": ("print_phone", StringType()),
        "Custom_Print_Phone__c": ("custom_print_phone", StringType()),
        "Print_Url__c": ("print_url", StringType()),
        "Custom_Print_Url__c": ("custom_print_url", StringType()),
        "Standard_Print_Url__c": ("standard_print_url", StringType()),
        "Special_Instructions_for_Implementatio__c": ("special_instructions", StringType()),
        "Incentives__c": ("incentives", BooleanType()),
        "GCRM_Account_ID__c": ("gcrm_account_id", StringType()),
        "LVN_Account__c": ("lv_account", BooleanType()),
        "LV_Island_Account_URL__c": ("lv_island_account_url", StringType()),
        # "OwnerId": ("owner_id", StringType()),
        "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        "LastModifiedDate": ("last_modified_date", TimestampType())
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType()),
        # "RecordTypeId": ("record_type_id", StringType())
    },

    "salesforce_uat_100_bronze_account_relationship": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Benefit_Sponsor__c": ("benefit_sponsor_id", StringType()),
        "Benefit_Sponsor_Name__c": ("benefit_sponsor_name", StringType()),
        "Svc_Acct__c": ("servicing_account_id", StringType()),
        "Svc_Acct_Name__c": ("servicing_account_name", StringType()),
        "Line_of_Business__c": ("line_of_business", StringType()),
        "Relationship_Type__c": ("relationship_type", StringType()),
        "Contract_Type__c": ("contract_type", StringType()),
        "Country__c": ("country", StringType()),
        "Start_Date__c": ("start_date", DateType()),
        "End_Date__c": ("end_date", DateType())
        # "OwnerId": ("owner_id", StringType()),
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType()),
        # "RecordTypeId": ("record_type_id", StringType())
    },

    "salesforce_uat_100_bronze_asset": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Description": ("description", StringType()),
        "Status": ("status", StringType()),
        "Implementation_Status__c": ("implementation_status", StringType()),
        "AccountId": ("account_id", StringType()),
        "Product2Id": ("product_id", StringType()),
        "ProductCode": ("product_code", StringType()),
        "ProductFamily": ("product_family", StringType()),
        "ProductDescription": ("product_description", StringType()),
        "SBQQ__RequiredBySubscription__c": ("required_by_subscription", StringType()),
        "SBQQ__RequiredByProduct__c": ("required_by_product", StringType()),
        "SBQQ__ProductOption__c": ("product_option", StringType()),
        "SBQQ__QuoteLine__c": ("quote_line", StringType()),
        "GCRM_Subscription_ID__c": ("gcrm_subscription_id", StringType()),
        "GCRM_Quote_Line_ID__c": ("gcrm_quote_line_id", StringType())
        # "OwnerId": ("owner_id", StringType()),
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_case": {
        "Id": ("id", StringType()),
        "CaseNumber": ("case_number", StringType()),
        "Status": ("status", StringType()),
        "Priority": ("priority", StringType()),
        "IsEscalated": ("is_escalated", BooleanType()),
        "Type": ("primary_case_action_type", StringType()),
        "Secondary_Case_Action_Type__c": ("secondary_case_action_type", StringType()),
        "Subject": ("subject", StringType()),
        "Description": ("description", StringType()),
        "NASF_Group_Count__c": ("nasf_group_count", IntegerType()),
        "Due_Date__c": ("due_date", DateType()),
        "Business_Days_Since_Creation__c": ("business_days_since_creation", IntegerType()),
        "Last_Comment__c": ("last_comment", StringType()),
        "AccountId": ("account_id", StringType()),
        "Friendly_Account_Name__c": ("friendly_account_name", StringType()),
        "Account_Business_Type__c": ("account_business_type", StringType()),
        "Account_Manager__c": ("account_manager", StringType()),
        "Business_Region__c": ("business_region", StringType()),    
        "IsClosed": ("is_closed", BooleanType()),
        "ClosedDate": ("closed_date", DateType()),
        "Admin_Config_Owner__c": ("admin_config_owner", StringType()),
        "Mapping_Required__c": ("mapping_required", BooleanType()),
        "Mapping_Status__c": ("mapping_status", StringType()),
        "Mapping_Owner__c": ("mapping_owner", StringType()),
        "QA_Start_Date__c": ("qa_start_date", DateType()),
        "QA_Completed_Date__c": ("qa_completed_date", DateType()),
        "QA_Reviewer__c": ("qa_reviewer", StringType()),
        "Correction__c": ("correction", BooleanType()),
        "Correction_Details__c": ("correction_details", StringType()),
        # "OwnerId": ("owner_id", StringType()),
        "CreatedDate": ("created_date", TimestampType()),
        "CreatedById": ("created_by_id", StringType()),
        "LastModifiedDate": ("last_modified_date", TimestampType()),
        "LastModifiedById": ("last_modified_by_id", StringType())
        # "SystemModstamp": ("system_modstamp", TimestampType()),
        # "RecordTypeId": ("record_type_id", StringType())
    },

    "salesforce_uat_100_bronze_contact": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Title": ("title", StringType()),
        "Email": ("email", StringType()),
        "Contact_Status__c": ("status", StringType()),
        "AccountId": ("account_id", StringType()),
        "Account_Business_Type__c": ("account_business_type", StringType()),
        "Account_Status__c": ("account_status", StringType()),
        "GUID__c": ("account_guid", StringType()),
        "Name": ("name", StringType())
        # "OwnerId": ("owner_id", StringType()),
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_contract": {
        "Id": ("id", StringType()),
        "ContractNumber": ("contract_number", StringType()),
        "Name": ("name", StringType()),
        "Description": ("description", StringType()),
        "ContractTerm": ("contract_term", IntegerType()),
        "Status": ("status", StringType()),
        "StatusCode": ("status_code", StringType()),
        "StartDate": ("start_date", DateType()),
        "EndDate": ("end_date", DateType()),
        "AccountId": ("account_id", StringType()),
        "Business_Region__c": ("business_region", StringType()),
        "SBQQ__Opportunity__c": ("opportunity_id", StringType()),
        "CPQ_Pricebook__c": ("cpq_pricebook", StringType()),
        "Carrier__c": ("carrier", StringType()),
        "Sales_Channels__c": ("sales_channel", StringType()),
        "Channel_Rate__c": ("channel_rate", StringType()),
        "GCRM_Contract_ID__c": ("gcrm_contract_id", StringType())
        # "OwnerId": ("owner_id", StringType()),
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_member_group": {
        "Id": ("id", StringType()),
        "Name": ("number", StringType()),
        "Name__c": ("name", StringType()),
        "Group_Number__c": ("legacy_group_id", StringType()),
        "Active_Date__c": ("activation_date", DateType()),
        "Termination_Date__c": ("termination_date", DateType()),
        "Status__c": ("status", StringType()),
        "PSF_Count__c": ("psf_count", IntegerType()),
        "hlp_Benefit_Sponsors__c": ("benefit_sponsors_count", IntegerType()),
        "hlp_Payers__c": ("payers_count", IntegerType()),
        "Admin_Line_Of_Business__c": ("admin_line_of_business", StringType()),
        "Plan_Category__c": ("plan_category", StringType()),
        "Plan_Type__c": ("plan_type", StringType()),
        "Migration_Group_Number__c": ("registration_group_code", StringType()),
        "Client_Account__c": ("account_id", StringType()),
        "Client_Account_Relationship__c": ("client_account_relationship", StringType()),
        "Client_Account_Manager__c": ("client_account_manager", StringType()),
        "Domestic_Country__c": ("domestic_country", StringType()),
        "Purchase_Order_Required__c": ("purchase_order_required", BooleanType()),
        "Purchase_Order_Number__c": ("purchase_order_number", StringType()),
        "Any_Special_Instructions__c": ("special_instructions", StringType()),
        "Card_Template__c": ("card_template", StringType()),
        "Card_Name__c": ("card_name", StringType()),
        "Consult_Billing_Method__c": ("consult_billing_method", StringType()),
        "Eligibility_Option__c": ("primary_eligibility", StringType()),
        "Elig_Dep_Inc_In_File__c": ("dependents_included", BooleanType()),
        "Allow_Caregiver_Program__c": ("allow_caregiver_program", BooleanType()),
        "Allow_Conversion_to_Retail__c": ("allow_conversion_to_retail", BooleanType()),
        "Allow_Geo_Fencing__c": ("allow_geofencing", BooleanType()),
        "Allow_Minor_Registration__c": ("allow_minor_registration", BooleanType()),
        "OneAppAccess__c": ("one_app_access", BooleanType()),
        "Health_Assistant__c": ("health_assistant", BooleanType()),
        "Sexual_Health_Opt_Out__c": ("sexual_health", BooleanType()),
        "Teladoc_Select__c": ("teladoc_select", BooleanType()),
        "Enable_Livongo_Combined_Eligibility__c": ("enable_livongo_combined_eligibility", BooleanType()),
        "Enable_Livongo_Referrals__c": ("enable_livongo_referrals", BooleanType()),
        "Enable_Chronic_Care_Referrals__c": ("enable_chronic_care_referrals", StringType()),
        "Livongo_Registration_code__c": ("livongo_registration_code", StringType()),
        "LV_Client_Code__c": ("livongo_client_code", StringType()),
        "LV_Client_Member_Code__c": ("livongo_client_member_code", StringType()),
        "MyStrength_Global_Access_Code__c": ("mystrength_global_access_code", StringType()),
        "Cross_Billing__c": ("cross_billing", BooleanType()),
        "Disable_Flow__c": ("disable_flow", BooleanType()),  
        "Marketing_Approved__c": ("marketing_approved", BooleanType()),
        "Approved_Marketing_Start_Date__c": ("marketing_approved_start_date", DateType()),
        "Direct_mail__c": ("direct_mail", BooleanType()),
        "Email__c": ("email", BooleanType()),
        "Text_SMS__c": ("text_sms", BooleanType()),
        "Incentives_Opt_In__c": ("incentives_opt_in", BooleanType()),
        "Logo_Tag_ID__c": ("logo_tag_id", StringType()),
        "Logo1_ID__c": ("logo_1_id", StringType()),
        "Logo2_ID__c": ("logo_2_id", StringType()),
        "Logo3_ID__c": ("logo_3_id", StringType()),
        "Logo4_ID__c": ("logo_4_id", StringType()),
        "AltLogo1_ID__c": ("alt_logo_1_id", StringType()),
        "AltLogo2_ID__c": ("alt_logo_2_id", StringType()),
        "Co_Brand_with_Logo__c": ("co_brand_with_logo", BooleanType()),
        "Tri_Brand_with_Logo__c": ("tri_brand_with_logo", BooleanType()),
        "CreatedDate": ("created_date", TimestampType()),
        "CreatedById": ("created_by_id", StringType()),
        "LastModifiedDate": ("last_modified_date", TimestampType()),
        "LastModifiedById": ("last_modified_by_id", StringType())
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_member_group_role": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Role_Type__c": ("role_type", StringType()),
        "Mbr_Group__c": ("member_group_id", StringType()),
        "Mbr_Group_Status__c": ("member_group_status", StringType()),
        "Source_Account__c": ("source_account_id", StringType())
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_opportunity": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Description": ("description", StringType()),
        "Type": ("type", StringType()),
        "Sub_Type__c": ("subtype", StringType()),
        "StageName": ("stage_name", StringType()),
        "Opp_Guid__c": ("opportunity_guid", StringType()),
        "IsWon": ("is_won", BooleanType()),
        "IsClosed": ("is_closed", BooleanType()),
        "CloseDate": ("closed_date", DateType()),
        "HasOpportunityLineItem": ("has_opportunity_line_item", BooleanType()),
        "AccountId": ("source_account_id", StringType()),
        "Account_Name__c": ("account_name", StringType()),
        "Account_GUID__c": ("account_guid", StringType()),
        "Business_Region__c": ("business_region", StringType()),
        "Client_Manager__c": ("client_manager", StringType()),
        "Contract_Path__c": ("contract_path_id", StringType()),
        "Direct_Contract__c": ("direct_contract", StringType()),
        "Contract_Service_Agreement_Status__c": ("contract_service_agreement_status", StringType()),
        "Contracting_Lens__c": ("contracting_lens", StringType()),
        "Primary_Carrier__c": ("primary_carrier_id", StringType()),
        "Primary_Carrier_Account__c": ("primary_carrier_name", StringType()),
        "Sales_Channels__c": ("sales_channel", StringType()),
        "Sub_Channel__c": ("sales_sub_channel", StringType()),
        "Channel_Rate__c": ("channel_rate", StringType()),
        "GCRM_Source_Id__c": ("gcrm_source_id", StringType()),
        "GCRM_Contract_Path__c": ("gcrm_contract_path", StringType()),
        "GCRM_Contracting_Account__c": ("gcrm_contracting_account", StringType()),
        "LV_Island_Source_Id__c": ("livongo_island_source_id", StringType()),
        # "OwnerId": ("owner_id", StringType()),
        "CreatedDate": ("created_date", TimestampType()),
        "CreatedById": ("created_by_id", StringType()),
        "LastModifiedDate": ("last_modified_date", TimestampType()),
        "LastModifiedById": ("last_modified_by_id", StringType())
        # "SystemModstamp": ("system_modstamp", TimestampType()),
        # "RecordTypeId": ("record_type_id", StringType())
    },

    "salesforce_uat_100_bronze_opportunity_product": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Adolescent_Population__c": ("adolescent_population", BooleanType()),
        "Effective_Start_Date__c": ("effective_start_date", DateType()),
        "OpportunityId": ("opportunity_id", StringType()),
        "Product2Id": ("product_id", StringType()),
        "Product__c": ("product", StringType()),
        "ProductCode": ("product_code", StringType()),
        "Product_Family__c": ("product_family", StringType()),
        "Product_Portfolio__c": ("product_portfolio", StringType()),
        "Product_Rollup__c": ("product_rollup", StringType())
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_plan_specific_fees_by_product": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Member_Group__c": ("member_group_id", StringType()),
        "Group_Number__c": ("legacy_group_id", IntegerType()),
        "Consult_Fee_Mbr_Pd__c": ("visit_fee_member", DoubleType()),
        "Consult_Fee_Plan_Pd__c": ("visit_fee_client", DoubleType()),
        "Product__c": ("product", StringType()),
        "PSF_ProductCode__c": ("psf_product_code", StringType()),
        "Product_Start_Date__c": ("product_start_date", DateType()),
        "Product_End_Date__c": ("product_end_date", DateType()),
        "Actual_Copay_May_Be_Less__c": ("print_or_less", BooleanType()),
        "USGH_APP_Opt_Out__c": ("usgh_app_opt_out", BooleanType()),
        "GLP_1_Model__c": ("glp_1_model", StringType()),
        "Subscription__c": ("subscription_id", StringType()),
        "Asset__c": ("asset_id", StringType()),
        "Asset_Name__c": ("asset_name", StringType()),
        "Sold_to_Account__c": ("sold_to_account", StringType()),
        "Sold_to_Account_GUID__c": ("sold_to_account_guid", StringType()),
        "Bill_to_Account__c": ("bill_to_account", StringType()),
        "Bill_to_Account_GUID__c": ("bill_to_account_guid", StringType()),
        "Payer_Account__c": ("payer_account", StringType()),
        "Payer_Account_GUID__c": ("payer_account_guid", StringType())
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_product": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "ProductCode": ("product_code", StringType()),
        "Family": ("family", StringType()),
        "Product_Portfolio__c": ("product_portfolio", StringType()),
        "Description": ("description", StringType()),
        "IsActive": ("is_active", BooleanType())
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType()),
        # "RecordTypeId": ("record_type_id", StringType())
    },

    "salesforce_uat_100_bronze_subscription": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Status__c": ("status", StringType()),
        "CurrencyIsoCode": ("currency_iso_code", StringType()),
        "Current_Membership_Fee__c": ("membership_fee", DoubleType()),
        "Fee_Type__c": ("fee_type", StringType()),
        "Bundle_Type__c": ("bundle_type", StringType()),
        "SBQQ__SubscriptionStartDate__c": ("subscription_start_date", DateType()),
        "SBQQ__SubscriptionEndDate__c": ("subscription_end_date", DateType()),
        "SBQQ__Account__c": ("account_id", StringType()),
        "SBQQ__Contract__c": ("contract_id", StringType()),
        "SBQQ__ContractNumber__c": ("contract_number", StringType()),
        "SBQQ__Product__c": ("product_id", StringType()),
        "SBQQ__ProductName__c": ("product_name", StringType()),
        "Oportunity_Id__c": ("opportunity_id", StringType()),
        "GCRM_Subscription_ID__c": ("gcrm_subscription_id", StringType())
        # "OwnerId": ("owner_id", StringType()),
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    },

    "salesforce_uat_100_bronze_user": {
        "Id": ("id", StringType()),
        "Name": ("name", StringType()),
        "Title": ("title", StringType()),
        "Email": ("email", StringType()),
        "IsActive": ("is_active", BooleanType()),
        "ProfileId": ("profile_id", StringType()),
        "ContactId": ("contact_id", StringType()),
        "ManagerId": ("manager_id", StringType()),
        "UserRoleId": ("user_role_id", StringType()),
        "AccountId": ("account_id", StringType())
        # "CreatedDate": ("created_date", TimestampType()),
        # "CreatedById": ("created_by_id", StringType()),
        # "LastModifiedDate": ("last_modified_date", TimestampType()),
        # "LastModifiedById": ("last_modified_by_id", StringType()),
        # "SystemModstamp": ("system_modstamp", TimestampType())
    }
}

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Create Function to apply the columns mapping to each table.

# CELL ********************

def transform_bronze_table(df, columns_mapping):
    """
    Transforms a DataFrame by renaming columns, casting types, reordering, 
    and ensuring Boolean columns have correct values.
    
    :param df: PySpark DataFrame to transform
    :param columns_mapping: Dictionary mapping old column names to (new column names, data types)
    :return: Transformed PySpark DataFrame
    """
    
    # Apply renaming, reordering, and Data Type casting
    df_transformed = df.select(
        [col(old_name).cast(new_type).alias(new_name) for old_name, (new_name, new_type) in columns_mapping.items()]
    )
    
    # Standardize Boolean columns
    for old_name, (new_name, new_type) in columns_mapping.items():
        if new_type == BooleanType():  # Check if column is Boolean
            # Ensure the column is casted to String first before applying transformation
            df_transformed = df_transformed.withColumn(
                new_name,
                when(col(new_name).cast(StringType()).isin("Yes", "Y"), True)
                .when(col(new_name).cast(StringType()).isin("No", "N"), False)
                .otherwise(col(new_name))  # Keep existing nulls
                .cast(BooleanType())  # Finally, cast to BooleanType
            )
    
    return df_transformed

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Apply Function to transform each table and save as Silver Table in Lakehouse.

# CELL ********************

transformed_tables = {}  # Dictionary to store transformed DataFrames

for table_name, columns_mapping in silver_tables_columns_mapping.items():
    # Load the table from the Lakehouse
    df = spark.read.format("delta").load(f"abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/{table_name}")
    
    # Transform the DataFrame
    transformed_table = transform_bronze_table(df, columns_mapping)

    # Extract the name portion after "bronze_"
    if "bronze_" in table_name:
        table_suffix = table_name.split("bronze_")[1]
    else:
        raise ValueError(f"Table name '{table_name}' does not contain 'bronze_'")
    
    # Define the new table name
    new_table_name = f"salesforce_uat_200_silver_{table_suffix}"
    
    # Store it in the dictionary
    transformed_tables[new_table_name] = transformed_table

    # Save back to Lakehouse
    transformed_table.write.format("delta") \
        .option("overwriteSchema", "true") \
        .mode("overwrite") \
        .save(f"abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/{new_table_name}")
    
    print(f"✅ Transformed and saved: {new_table_name}")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Transform _**member_group**_.

# CELL ********************

df_salesforce_lcrm_uat_member_group_silver = spark.read.format("delta").load("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_member_group")

# Transform dependent_eligibility .withColumnRenamed("dependents_included", "dependent_eligibility") \
df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver \
                                                .withColumn(
                                                    "dependent_eligibility",
                                                    when(col("dependents_included") == True, col("primary_eligibility"))
                                                    .otherwise(lit("Open"))
                                                    .cast("string"))

df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.drop("dependents_included")

# Transform marketing columns

marketing_columns = ["direct_mail", "email", "text_sms", "incentives_opt_in"]

df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.select(
    *[
        when(col(c) == True, "Opt In").otherwise("Opt Out").alias(c) if c in marketing_columns else col(c)
        for c in df_salesforce_lcrm_uat_member_group_silver.columns
    ]
)

# NULL to None
df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.withColumn("enable_chronic_care_referrals", when(col("enable_chronic_care_referrals").isNull(), lit("None")).otherwise(col("enable_chronic_care_referrals")))

# Country Codes
df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.withColumn("domestic_country", when(col("domestic_country") == "USA", lit("United States Of America")).otherwise(col("domestic_country")))

df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.withColumn("domestic_country", when(col("domestic_country") == "CAN", lit("Canada")).otherwise(col("domestic_country")))

# Transform legacy_group_id column so that it becomes unique and can be used as Primary Key in Semantic Model with EDS
df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.withColumn("legacy_group_id", when(col("legacy_group_id").isNull(), concat(lit("null_"), col("id").cast("string")))
                                    .otherwise(col("legacy_group_id").cast("string")))

# Save back to Lakehouse
df_salesforce_lcrm_uat_member_group_silver.write.format("delta") \
    .option("overwriteSchema", "true") \
    .mode("overwrite") \
    .save("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_member_group")

# Display table
# display(df_salesforce_lcrm_uat_member_group_silver)

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Transform _**member_group_role**_.

# CELL ********************

# Get Member Group Role Source Account Name and Member Group Name joining with the corresponding table

df_salesforce_lcrm_uat_account_silver = spark.read.format("delta").load("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_account")

df_salesforce_lcrm_uat_account_silver = df_salesforce_lcrm_uat_account_silver.select("id", "name").withColumnsRenamed({"id": "ACCT_id", "name": "source_account_nm"})

df_salesforce_lcrm_uat_member_group_silver = spark.read.format("delta").load("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_member_group")

df_salesforce_lcrm_uat_member_group_silver = df_salesforce_lcrm_uat_member_group_silver.select("id", "name").withColumnsRenamed({"id": "MG_id", "name": "member_group_nm"})

df_salesforce_lcrm_uat_member_group_role_silver = spark.read.format("delta").load("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_member_group_role")

df_salesforce_lcrm_uat_member_group_role_silver = df_salesforce_lcrm_uat_member_group_role_silver.join(
    df_salesforce_lcrm_uat_member_group_silver,
    df_salesforce_lcrm_uat_member_group_role_silver["member_group_id"] == df_salesforce_lcrm_uat_member_group_silver["MG_id"],
    "left_outer"
).drop("MG_id")

df_salesforce_lcrm_uat_member_group_role_silver = df_salesforce_lcrm_uat_member_group_role_silver.join(
    df_salesforce_lcrm_uat_account_silver,
    df_salesforce_lcrm_uat_member_group_role_silver["source_account_id"] == df_salesforce_lcrm_uat_account_silver["ACCT_id"],
    "left_outer"
).drop("ACCT_id")

df_salesforce_lcrm_uat_member_group_role_silver = df_salesforce_lcrm_uat_member_group_role_silver.select(
    "id", "name", "role_type", "member_group_id", "member_group_nm", "member_group_status", "source_account_id", "source_account_nm"
).orderBy("member_group_id")

df_salesforce_lcrm_uat_member_group_role_silver.write.format("delta") \
    .option("overwriteSchema", "true") \
    .mode("overwrite") \
    .save("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_member_group_role")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Transform _**opportunity**_.

# CELL ********************

# Remove last 3 characters from Id column in salesforce_uat_200_silver_opportunity and save it back to Lakehouse.

df_salesforce_lcrm_uat_opportunity_silver = spark.read.format("delta").load("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_opportunity")

df_salesforce_lcrm_uat_opportunity_silver = df_salesforce_lcrm_uat_opportunity_silver.withColumn("id", expr("substring(id, 1, 15)"))

df_salesforce_lcrm_uat_opportunity_silver.write.format("delta") \
    .option("overwriteSchema", "true") \
    .mode("overwrite") \
    .save("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_opportunity")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ##### Transform _**opportunity_product**_.

# CELL ********************

# Remove last 3 characters from Id column in salesforce_uat_200_silver_opportunity_product and save it back to Lakehouse.

df_salesforce_lcrm_uat_opportunity_product_silver = spark.read.format("delta").load("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_opportunity_product")

df_salesforce_lcrm_uat_opportunity_product_silver = df_salesforce_lcrm_uat_opportunity_product_silver.withColumn("opportunity_id", expr("substring(id, 1, 15)"))

df_salesforce_lcrm_uat_opportunity_product_silver.write.format("delta") \
    .option("overwriteSchema", "true") \
    .mode("overwrite") \
    .save("abfss://b08d383a-b8cc-4b8e-b189-d9d696a01977@onelake.dfs.fabric.microsoft.com/4b9a8e2d-64db-464e-b218-053f22ac13b1/Tables/salesforce_uat_200_silver_opportunity_product")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }
